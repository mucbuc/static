/////////////////////////////////////////////////////////////////////////////////////////////
// asserter_t
/////////////////////////////////////////////////////////////////////////////////////////////
template<class T> 
const asserter_throw_t<T> asserter_t::make_asserter(bool value, const char * message)
{	return asserter_throw_t<T>(value, message); 	}

/////////////////////////////////////////////////////////////////////////////////////////////
template<class U> const asserter_t & asserter_t::print_current_val(const U & value, const char * message) const
{
    std::cout << message << ": " << value << std::endl;
    return * this;
}

/////////////////////////////////////////////////////////////////////////////////////////////
// asserter_throw_t<T>
/////////////////////////////////////////////////////////////////////////////////////////////
template<class T> 
bool asserter_throw_t<T>::can_handle(const char * file, int line, const char * function) const
{	
	if( !asserter_t::can_handle( file, line, function) )
		throw T(m_message); 
	return true; 
}

/////////////////////////////////////////////////////////////////////////////////////////////
template<class T> 
asserter_throw_t<T>::asserter_throw_t(bool value, const char * message)
	: asserter_t(value)
	, m_message(message)  
{}
